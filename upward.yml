# This is the UPWARD specification file for the Venia storefront.
# It is used by an UPWARD server implementation, such as upward-js and
# upward-php, to describe how the server responds to requests.
# See: https://pwastudio.io/technologies/upward/

# The root properties of an UPWARD spec file are part of a global context
# that includes request and environment data.
# These properties are available to other properties and are ultimately
# populated with Resolvers.

# The root 'status', 'headers', and 'body' properties are required properties
# in an UPWARD spec file.
# An UPWARD server uses the resolved values of these properties to create an
# HTTP response to the client.
# In this file, these properties get their values from a top-level
# 'response' object, which is a recommended and best practice approach.
status: SubfolderResponse.status
headers: SubfolderResponse.headers
body: SubfolderResponse.body

SubfolderResponse:
  resolver: conditional
  when:
    - matches: request.url.pathname
      pattern: '^/404.html$'
      use: notFoundResponse
    - matches: request.url.pathname
      pattern: '^/(releases|manuals)(/|$)'
      use: subfolderProxyResponse
    - matches: fileExtension
      pattern: '(jpg|gif)'
      use: veniaStatic
  default: veniaResponse #veniaResponse

notFoundResponse:
  resolver: inline
  inline:
    status:
      resolver: inline
      inline: 404
    headers:
      resolver: inline
      inline:
        content-type:
          inline: text/html
    body:
      resolver: file
      file:
        resolver: inline
        inline: './templates/404.html'

comingSoonResponse:
  resolver: inline
  inline:
    status:
      resolver: inline
      inline: 200
    headers:
      resolver: inline
      inline:
        content-type:
          inline: text/html
    body:
      resolver: file
      file:
        resolver: inline
        inline: './templates/coming-soon.html'
#redirectResponse:
#  inline:
#    status: 301
#    headers:
#      resolver: inline
#      inline:
#        location: constructReleasesTarget
#    body:
#      inline: ''

subfolderProxyResponse:
  resolver: proxy
  target: constructSubfolderTarget
  pathRewrite:
    inline: '{"^/(releases|manuals)":""}'

requestedResource:
  resolver: conditional
  when:
    - matches: request.url.pathname
      pattern: '^/(releases|manuals)(/|$)'
      use: $match.$2
  default:
    inline: ''

requestedHost:
  resolver: conditional
  when:
    - matches: request.url.pathname
      pattern: '^/(releases|manuals)/(.*)$'
      use: $match.$1
  default:
    inline: ''

constructSubfolderTarget:
  resolver: template
  engine: mustache
  provide:
    host: requestedHost
    url: requestedResource
  template:
    inline: "https://{{ host }}.fooman.com/"
