# This is the UPWARD specification file for the Venia storefront.
# It is used by an UPWARD server implementation, such as upward-js and
# upward-php, to describe how the server responds to requests.
# See: https://pwastudio.io/technologies/upward/

# The root properties of an UPWARD spec file are part of a global context
# that includes request and environment data.
# These properties are available to other properties and are ultimately
# populated with Resolvers.

# The root 'status', 'headers', and 'body' properties are required properties
# in an UPWARD spec file.
# An UPWARD server uses the resolved values of these properties to create an
# HTTP response to the client.
# In this file, these properties get their values from a top-level
# 'response' object, which is a recommended and best practice approach.
status: SubfolderResponse.status
headers: SubfolderResponse.headers
body: SubfolderResponse.body

SubfolderResponse:
  resolver: conditional
  when:
#    - matches: request.url.pathname
#      pattern: '^/(graphql|rest|media)(/|$)'
#      use: veniaProxy
    - matches: request.url.pathname
      pattern: '^/404.html$'
      use: notFoundResponse
    - matches: request.url.pathname
      pattern: '^/(releases|manuals)(/|$)'
      use: subfolderProxyResponse
    - matches: request.url.pathname
      pattern: '^/(robots\.txt|favicon\.ico|manifest\.json|sitemap\.xml)'
      use: staticFromRoot
    - matches: fileExtension
      pattern: '(js|json|png|svg|ico|css|txt|jpg|gif)'
      use: veniaStatic
  default: comingSoonResponse

notFoundResponse:
  resolver: inline
  inline:
    status:
      resolver: inline
      inline: 404
    headers:
      resolver: inline
      inline:
        content-type:
          inline: text/html
    body:
      resolver: file
      file:
        resolver: inline
        inline: './templates/404.html'

comingSoonResponse:
  resolver: inline
  inline:
    status:
      resolver: inline
      inline: 200
    headers:
      resolver: inline
      inline:
        content-type:
          inline: text/html
    body:
      resolver: file
      file:
        resolver: inline
        inline: './templates/coming-soon.html'

subfolderProxyResponse:
  resolver: proxy
  target: constructSubfolderTarget
  pathRewrite:
    inline: '{"^/(releases|manuals)":""}'

requestedHost:
  resolver: conditional
  when:
    - matches: request.url.pathname
      pattern: '^/(releases|manuals)/(.*)$'
      use: $match.$1
  default:
    inline: ''

constructSubfolderTarget:
  resolver: template
  engine: mustache
  provide:
    host: requestedHost
  template:
    inline: "https://{{ host }}.fooman.com/"

staticFromRoot:
  inline:
    status: 200
    headers:
      resolver: inline
      inline:
        content-type: contentTypeFromExtension
    body:
      resolver: file
      parse:
        inline: text
      encoding:
        inline: binary
      file:
        resolver: template
        engine: mustache
        provide:
          filename: request.url.pathname
        template:
          resolver: inline
          inline: './assets{{ filename }}'

foomanStaticIncludes:
  resolver: directory
  directory:
    resolver: inline
    inline: './assets'

contentTypeFromExtension:
  when:
    - matches: fileExtension
      pattern: '^ico$'
      use:
        inline: image/x-icon
    - matches: fileExtension
      pattern: '^txt$'
      use:
        inline: text/plain
    - matches: fileExtension
      pattern: '^json$'
      use:
        inline: application/json
    - matches: fileExtension
      pattern: '^xml'
      use:
        inline: application/xml
  default:
    inline: text/html
